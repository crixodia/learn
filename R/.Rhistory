x = c(24, 13, 7, 5, 3, 2)  # Sample data
barplot(x)                 # Default barplot
?colors
browseURL("https://datalab.cc/rcolors")
barplot(x, col = "red3")  # red3
barplot(x, col = "slategray3")  # slategray3
barplot(x, col = rgb(.80, 0, 0))      # red3
barplot(x, col = rgb(.62, .71, .80))  # slategray3
# Web page with R colors swatches, color names, hex codes,
# RBG codes (in 0-255 and 0.00-1.00), and R index numbers;
# Browsable table on the page or in Google Sheets;
# downloadable as XLSX or PDF
browseURL("https://datalab.cc/rcolors")
barplot(x, col = rgb(.80, 0, 0))      # red3
barplot(x, col = "#CD0000")  # red3
barplot(x, col = "#9FB6CD")  # slategray3
barplot(x, col = colors() [555])  # red3
?palette  # Info on palettes
barplot(x, col = 1:6)                # Use current palette
barplot(x, col = rainbow(6))         # Rainbow colors
barplot(x, col = heat.colors(6))     # Yellow through red
barplot(x, col = terrain.colors(6))  # Gray through green
barplot(x, col = topo.colors(6))     # Purple through tan
barplot(x, col = cm.colors(6))       # Pinks and blues
cat("\014")  # Mimics ctrl+L
barplot(x, col = c("red3", "slategray3"))
tidyverse
tidyverse
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
x = c(24, 13, 7, 5, 3, 2)  # Sample data
clear
cls
clc
clear()
install.packages(tidyverse)
install.packages("readxl")
install.packages("tidyverse")
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
df <- read_csv("data/state_trends.csv") |>
mutate(across(c(region:psy_reg), factor)) |>
print()
View(df)
View(df)
?plot     # Get info on "Generic X-Y Plotting
?barplot  # Get info on the "Bar Plots" function
plot(df$psy_reg)
View(df)
df <- read_csv("data/state_trends.csv") |>
mutate(across(c(region:psy_reg), factor)) |>
print()
plot(df$psy_reg)
df |>
select(psy_reg) |>
plot()
df |>
select(psy_reg) |>
barplot()
df |>
select(psy_reg) |>
table() |>  # Put data in appropriate format
barplot()
df |>
select(psy_reg) |>
table() |>
sort(decreasing = T) |>  # Sort table
barplot()
df |>
select(psy_reg) |>
table() |>  # Put data in appropriate format
barplot()
df |>
select(psy_reg) |>
table() |>  # Put data in appropriate format
sort(decreasing = F) |>  # Sort table
barplot(
main   = "Personalities of 48 Contiguous US States",
sub    = "(Source: state_trends.csv)",
horiz  = T,  # Draw horizontal bars
ylab   = "Personality Profile",
xlab   = "Number of States",
xlim   = c(0, 25),  # Limits for X axis
border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
df |>
select(region, psy_reg) |>
plot()
df_t <- df |>
select(psy_reg, region) |>
table() |>
print()  # Show table in Console
df_t |> barplot(legend = rownames(df_t))
df_t |> barplot()
# Side-by-side bar w/legend
df_t |>
barplot(
legend = rownames(df_t),
beside = T  # Put bars next to each other
)
df_t |> barplot(beside = T)
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
df <- read_csv("data/state_trends.csv")
hist(df$data_science)
hist(df$data_science,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Searches for \"Data Science\"",
sub    = "(Source: state_trends.csv)",
ylab   = "Frequency",
xlab   = "Searches for \"Data Science\"",
border = NA,  # No borders on bars
col    = "#CD0000"  # Sets fill color to red3
)
plot(density(df$data_science))
hist(df$data_science,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Searches for \"Data Science\"",
sub    = "(Source: state_trends.csv)",
ylab   = "Frequency",
xlab   = "Searches for \"Data Science\"",
border = NA,  # No borders on bars
col    = "#CD0000"  # Sets fill color to red3
)
plot(density(df$data_science))
df |>
pull(data_science) |>  # Use pull() instead of select()
as.numeric() |>        # Coerces to numeric variable
density() |>           # Draws density curve
plot(
main = "Density Plot of Searches for \"Data Science\"",
sub  = "(Source: state_trends.csv)",
ylab = "Frequency",
xlab = "Searches for \"Data Science\"",
)
df |>
pull(data_science) |>
as.numeric() |>
density() |>
polygon(col  = "#CD0000")  # Sets fill color to red3
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)
# Also convert all character variables to factors
df <- read_csv("data/state_trends.csv") |>
mutate(across(where(is_character), as_factor)) |>
print()
boxplot(df$dance)
df |>
filter(dance > 90) |>
select(state, dance)
# Boxplot with options
df |>
select(dance) |>
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Searches for \"Dance\"",
sub    = "(Source: state_trends.csv)",
xlab   = "Searches for \"Dance\"",
col    = "#CD0000"  # red3
)
df |>
select(basketball:hockey) |>
boxplot()
df |>
filter(hockey > 45) |>
select(state, hockey) |>
arrange(desc(hockey))
# Boxplots by group using plot()
df |>
select(has_nhl, hockey) |>
plot()
# Who is the outlier on "No"?
df |>
filter(has_nhl == "No") |>
filter(hockey > 80) |>
select(state, hockey)
# Boxplots by group using plot()
df |>
select(has_nhl, hockey) |>
plot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Searches for \"Hockey\"",
sub    = "(Source: state_trends.csv)",
xlab   = "Searches for \"Hockey\"",
ylab   = "State has NHL Hockey Team",
col    = "#CD0000"  # red3
)
# File:     03_05_Scatterplots.R
# Project:  LearningR
# LOAD PACKAGES ############################################
# RStudio will prompt you to download any packages that
# aren't already installed.
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# LOAD DATA ################################################
df <- read_csv("data/state_trends.csv") |>
select(basketball:hockey) |>
glimpse()
# Plot all associations
df |> plot()
# Bivariate scatterplot with defaults
df |>
select(soccer, hockey) |>
plot()
# Bivariate scatterplot with options
df |>
select(soccer, hockey) |>
plot(
main = "Scatterplot of Searches by State",
xlab = "Searches for \"Soccer\"",
ylab = "Searches for \"Hockey\"",
col  = "red3",  # Color of points
pch  = 20,      # "Plotting character" (small circle)
)
# Add fit linear regression line (y ~ x)
lm(df$hockey ~ df$soccer) |>
abline()
# RStudio will prompt you to download any packages that
# aren't already installed.
# Load packages
library(datasets)   # Loads the built-in datasets
# SINGLE TIME SERIES #######################################
# uspop
?uspop  # Get info about data
uspop   # Display data
?ts  # Get info about time-series objects
# Plot with default plot()
plot(uspop)
uspop |>
plot(
main = "US Population 1790â€“1970 ",
sub  = "(Source: datasets::uspop)",
xlab = "Year",
ylab = "Population (in millions)",
)
abline(v = 1930, col = "lightgray")
text(1930, 10, "1930", col = "red3")
abline(v = 1940, col = "lightgray")
text(1940, 10, "1940", col = "red3")
# Plot with ts.plot()
ts.plot(uspop)
plot.ts(uspop)
ts.plot(uspop)
plot.ts(uspop)
EuStockMarkets
# Three different plot functions
plot(EuStockMarkets)     # Stacked windows
plot.ts(EuStockMarkets)  # Identical
ts.plot(EuStockMarkets)  # One window
ts.plot(
EuStockMarkets,
col = rainbow(4))  # Color lines
legend(              # Add legend
"topleft",         # Position
legend = colnames(EuStockMarkets),  # Names for legend
col = rainbow(4),  # Colors for legend
lty = 1            # Line type: solid
)
detach("package:datasets", unload = T)
# aren't already installed.
# Load packages
library(tidyverse)  # Loads the `tidyverse` collection
library(readxl)     # Reads CSV and Excel files
# Select state codes and search data
df <- read_csv("data/state_trends.csv") |>
select(state_code, artificial_intelligence:hockey)
# Calculate clusters using hclust(), an agglomerative method
hc <- df |>  # Get data
dist() |>  # Compute distance/dissimilarity matrix
hclust()   # Compute hierarchical clusters
# Plot dendrogram
hc |> plot(labels = df$state_code)
# Draw boxes around clusters
hc |> rect.hclust(k = 2, border = "gray80")  # 2 boxes
hc |> rect.hclust(k = 3, border = 2:4)       # 3 boxes
hc <- df |>  # Get data
dist() |>  # Compute distance/dissimilarity matrix
hclust()   # Compute hierarchical clusters
hc |> plot(labels = df$state_code)
# Draw boxes around clusters
hc |> rect.hclust(k = 2, border = "gray80")  # 2 boxes
hc |> rect.hclust(k = 3, border = 2:4)       # 3 boxes
